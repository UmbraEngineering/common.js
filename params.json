{"name":"Common.js","tagline":"A CommonJS preprocessor that builds you CommonJS style app into code the browser can use.","body":"# CommonJS For The Browser\r\n\r\nA CommonJS preprocessor that builds you CommonJS style app into code the browser can use.\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install common.js\r\n```\r\n\r\n## Usage\r\n\r\n#### Step 1: Write your JavaScript\r\n\r\n###### foo.js\r\n\r\n```javascript\r\nmodule.exports = function() {\r\n\tconsole.log('foo');\r\n};\r\n```\r\n\r\n###### bar.js\r\n\r\n```javascript\r\nvar foo = require('foo');\r\n\r\nexports.doTheThing = function() {\r\n\tfoo();\r\n};\r\n```\r\n\r\n#### Step 2: Build you code using commonjs-preprocessor\r\n\r\n```bash\r\n$ commonjs --src ./path/to/javascripts --dest ./path/to/js --client\r\n```\r\n\r\n#### Step 3: Include the modules into your app and use them\r\n\r\n```html\r\n<script src=\"js/common.js\"></script>\r\n<script src=\"js/foo.js\"></script>\r\n<script src=\"js/bar.js\"></script>\r\n<script>\r\n\tvar bar = require('bar');\r\n\r\n\tbar.doTheThing();\r\n</script>\r\n```\r\n\r\n\r\n\r\n### Command-line Usage\r\n\r\n```\r\nUsage: commonjs [options]\r\n\r\nOptions:\r\n\r\n  -h, --help         output usage information\r\n  -V, --version      output the version number\r\n  -s, --src <src>    Source directory\r\n  -d, --dest <dest>  Destination directory\r\n  --client [client]  Output a common.js client script\r\n  -v, --verbose      Verbose output\r\n  -q, --quiet        Quite running mode (no output)\r\n```\r\n\r\n## How Does It Work Internally\r\n\r\nThe common.js preprocessor works by wrapping each of your JavaScript files in an extra function call which defines all the necessary bits for a CommonJS module (such as the `module` and `exports` variables). A compiled module looks something like this (except this has been cleaned up for reading):\r\n\r\n```javascript\r\n;\r\nrequire._modules[\"/bar.js\"] = (function () {\r\n    var __filename = \"/bar.js\";\r\n    var __dirname = \"/\";\r\n    var module = {\r\n        loaded: false,\r\n        exports: {},\r\n        filename: __filename,\r\n        dirname: __dirname,\r\n        require: null,\r\n        call: function () {\r\n            var require = module.require;\r\n            module.loaded = true;\r\n            module.call = function () {};\r\n            __module__();\r\n        },\r\n        parent: null,\r\n        children: []\r\n    };\r\n    var exports = module.exports;\r\n    /* ==  Begin source for module /bar.js  == */\r\n    var __module__ = function () {\r\n\r\n        var foo = require('./dir/foo');\r\n\r\n        exports.doTheThing = function () {\r\n            foo();\r\n        };\r\n\r\n    }; /* ==  End source for module /bar.js  == */\r\n    module.require = require._bind(module);\r\n    return module;\r\n}());;\r\n```\r\n\r\nOnce your modules are compiled, you add in the very tiny `common.js` client library which defines the `require` function and contains the rules for resolving modules. And that's it.\r\n\r\nIt should be noted that this is a 100% synchronous process, which means any module you intend to require has to loaded in the DOM *before* the `require` call is made.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}